from picamera.array import PiRGBArray
from picamera import PiCamera
import time
import cv2
import numpy as np
# initialize the camera and grab a reference to the raw camera capture
camera = PiCamera()
camera.resolution = (1024, 768)
camera.framerate = 30
rawCapture = PiRGBArray(camera, size=(1024, 768))
 
# allow the camera to warmup
time.sleep(0.1)
 
# capture frames from the camera
for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
	# grab the raw NumPy array representing the image, then initialize the timestamp
	# and occupied/unoccupied text
	img = frame.array
	gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
	gray_blur = cv2.GaussianBlur(gray, (15, 15), 0)
	edged = cv2.Canny(gray_blur, 30, 30)
	kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 1))
	closed = cv2.morphologyEx(edged, cv2.MORPH_CLOSE, kernel)
	_, circuit, hierarchy  = cv2.findContours(closed.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
	for cnt in circuit:
		if len(cnt) > 600:
			ellipse = 0
			ellipse = cv2.fitEllipse(cnt)
			if ellipse:
				cv2.ellipse(img, ellipse, (0, 0, 255), 2)
	for cnt in circuit:
		rect = 0
		rect = cv2.minAreaRect(cnt) # пытаемся вписать прямоугольник
		if rect and len(cnt)>100:
			box = cv2.boxPoints(rect) # поqиск четырех вершин прямоугольника
			box = np.int0(box) # округление координат
			cv2.drawContours(img,[box],0,(255,0,0),2) # рисуем прямоугольник
	roi  = img[30:660, 357:800]
	cv2.imshow("Colored", roi)
	key = cv2.waitKey(1) & 0xFF     
	# clear the stream in preparation for the next frame
	rawCapture.truncate(0)
 
	# if the `q` key was pressed, break from the loop
	if key == ord("q"):
		break
cv2.destroyAllWindows()
